{"version":3,"sources":["modules/index.js","modules/selectors.js","components/List.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","fetchData","payload","type","actions","changeSettings","initialState","myList","sortBy","reducer","state","action","cases","list","slice","sort","a","b","id","selectors","getMyList","getSettings","List","data","page","map","item","key","Settings","handleChange","e","props","target","value","this","onChange","React","Component","connect","dispatch","bindActionCreators","App","handleClick","setState","onPage","innerHTML","store","axios","get","then","response","catch","alert","className","to","onClick","style","color","path","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"0RAEaA,EACC,aADDA,EAED,WAGCC,EAAY,SAACC,GAAD,MAAc,CACrCC,KAAMH,EACNE,YAQWE,EAAU,CACrBH,YACAI,eAP4B,SAACH,GAAD,MAAc,CAC1CC,KAAMH,EACNE,aAsBII,EAAe,CACnBC,OAAQ,GACRC,OAAQ,MAgCKC,EA7BC,WAAwC,IAAvCC,EAAsC,uDAA9BJ,EAAcK,EAAgB,uDAAP,GAC9C,OAAQA,EAAOR,MACb,KAAKH,EACH,OAAO,2BACFU,GADL,IAEEH,OAAQI,EAAOT,QAAQU,QAE3B,KAAKZ,EACH,IAAMa,EAAOH,EAAMH,OAAOO,MAAM,GAChC,GAAoB,eAAjBH,EAAOT,QACR,OAAO,2BACFQ,GADL,IAEEH,OAAQM,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAC,WAAiBC,EAAC,YAAkB,EAAI,KACtET,OAAQG,EAAOT,UAGnB,GAAoB,OAAjBS,EAAOT,QACR,OAAO,2BACFQ,GADL,IAEEH,OAAQM,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,GAAKD,EAAEC,GAAK,GAAK,KAChDV,OAAQG,EAAOT,UAGnB,MACF,QACE,OAAOQ,I,uDC1DES,G,MALG,CAChBC,UAJgB,SAACV,GAAD,OAAWA,EAAMH,QAKjCc,YAJkB,SAACX,GAAD,OAAWA,EAAMF,UC0BtBc,EAzBF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMf,EAAmB,EAAnBA,OAAQgB,EAAW,EAAXA,KAC5B,OACE,+BACE,+BACE,4BACE,kCACA,2CAEDD,EAAKE,KAAI,SAACC,GACT,OACE,wBAAIC,IAAKD,EAAKR,IACZ,4BAAKQ,EAAKR,IACV,4BAAKQ,EAAI,gBAIf,4BACE,wCAAclB,GACd,qCAAWgB,OCdfI,E,4MACJC,aAAe,SAACC,GACd,EAAKC,MAAM3B,QAAQC,eAAeyB,EAAEE,OAAOC,Q,4CAG7C,WACE,IAAOT,EAAQU,KAAKH,MAAbP,KACP,OACE,+BACE,+BACE,4BACE,oCACA,4BACE,4BAAQN,GAAG,SAASe,MAAOC,KAAKH,MAAMvB,OAAQ2B,SAAUD,KAAKL,cAC3D,4BAAQI,MAAM,MAAd,MACA,4BAAQA,MAAM,cAAd,iBAIN,4BACE,wCAAcC,KAAKH,MAAMvB,QACzB,qCAAWgB,U,GArBAY,IAAMC,WAuCdC,eAVS,SAAC5B,GACvB,MAAO,CACLF,OAAQW,EAAUE,YAAYX,OAIP,SAAC6B,GAAD,MAAe,CACxCnC,QAASoC,YAAmB,eAAKpC,GAAWmC,MAG/BD,CAA6CV,GC3BtDa,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAURW,YAAc,SAACZ,GACb,EAAKa,SAAS,CACZC,OAAQd,EAAEE,OAAOa,aAXnB,EAAKnC,MAAQ,CACXkC,OAAQ,IAHO,E,qDAOnB,WACEE,EAAMP,UJJD,SAACA,GACNQ,IACGC,IAAI,aACJC,MAAK,SAACC,GACL,IAAM3B,EAAO2B,EAAS3B,KACtBgB,EAAStC,EAAUsB,OAEtB4B,OAAM,WACLC,MAAM,gC,oBIKV,WACE,MAA2BlB,KAAKH,MAAxBxB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OACRoC,EAAWV,KAAKxB,MAAhBkC,OAER,OACE,kBAAC,IAAD,KACE,yBAAKS,UAAU,aACb,+BACE,+BACE,4BACE,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CACEC,GAAG,QACHC,QAASrB,KAAKQ,YACdc,MAAgB,SAATZ,EAAkB,CAACa,MAAO,OAAS,CAACA,MAAO,UAHpD,SAQF,wBAAIJ,UAAU,QACZ,kBAAC,IAAD,CACEC,GAAG,YACHC,QAASrB,KAAKQ,YACdc,MAAgB,aAATZ,EAAsB,CAACa,MAAO,OAAS,CAACA,MAAO,UAHxD,gBAWR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,CAAMnC,KAAMhB,EAAQC,OAAQA,EAAQgB,KAAM,KAE5C,kBAAC,IAAD,CAAOkC,KAAK,aACV,kBAAC,EAAD,CAAUlC,KAAM,KAElB,kBAAC,IAAD,CAAOkC,KAAK,a,GAxDNtB,IAAMC,WA4ETC,eAXS,SAAC5B,GACvB,MAAO,CACLH,OAAQY,EAAUC,UAAUV,GAC5BF,OAAQW,EAAUE,YAAYX,OAIP,SAAC6B,GAAD,MAAe,CACxCnC,QAASoC,YAAmB,eAAKpC,GAAWmC,MAG/BD,CAA6CG,GClFxCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMjB,EAAQkB,YAAYvD,EAASwD,YAAgBC,MAEpCpB,cAEfqB,IAASC,OACP,kBAAC,IAAD,CAAUtB,MAAOA,GACf,kBAAC,EAAD,OAEFuB,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23fa4b67.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const ACTIONS = {\r\n  FETCH_DATA: \"FETCH_DATA\",\r\n  SETTINGS: \"SETTINGS\",\r\n};\r\n\r\nexport const fetchData = (payload) => ({\r\n  type: ACTIONS.FETCH_DATA,\r\n  payload,\r\n});\r\n\r\nexport const changeSettings = (payload) => ({\r\n  type: ACTIONS.SETTINGS,\r\n  payload,\r\n})\r\n\r\nexport const actions = {\r\n  fetchData,\r\n  changeSettings,\r\n};\r\n\r\nexport const getList = () => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\"data.json\")\r\n      .then((response)=>{\r\n        const data = response.data;\r\n        dispatch(fetchData(data))\r\n      })\r\n    .catch(()=>{\r\n      alert(\"Error: fetching data\")\r\n    })\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  myList: [],\r\n  sortBy: \"ID\"\r\n};\r\n\r\nconst reducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case ACTIONS.FETCH_DATA:\r\n      return {\r\n        ...state,\r\n        myList: action.payload.cases,\r\n      };\r\n    case ACTIONS.SETTINGS:\r\n      const list = state.myList.slice(0);\r\n      if(action.payload===\"CREATED_AT\") {\r\n        return {\r\n          ...state,\r\n          myList: list.sort((a, b) => (a[\"created_at\"] > b[\"created_at\"] ? -1 : 1)),\r\n          sortBy: action.payload,\r\n        };\r\n      };\r\n      if(action.payload===\"ID\") {\r\n        return {\r\n          ...state,\r\n          myList: list.sort((a, b) => (a.id > b.id ? 1 : -1)),\r\n          sortBy: action.payload,\r\n        };\r\n      };\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const getMyList = (state) => state.myList;\r\nconst getSettings = (state) => state.sortBy;\r\n\r\nconst selectors = {\r\n  getMyList,\r\n  getSettings,\r\n};\r\n\r\nexport default selectors;","import React from \"react\";\r\n\r\nconst List = ({ data, sortBy, page }) => {\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <td>ID</td>\r\n          <td>Created At</td>\r\n        </tr>\r\n        {data.map((item) => {\r\n          return (\r\n            <tr key={item.id}>\r\n              <td>{item.id}</td>\r\n              <td>{item[\"created_at\"]}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n        <tr>\r\n          <td>Sort by: {sortBy}</td>\r\n          <td>page: {page}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actions } from \"../modules/index\";\r\nimport selectors from \"../modules/selectors\";\r\n\r\nclass Settings extends React.Component {\r\n  handleChange = (e) => {\r\n    this.props.actions.changeSettings(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    const {page} = this.props\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>Sort</td>\r\n            <td>\r\n              <select id=\"sortBy\" value={this.props.sortBy} onChange={this.handleChange} >\r\n                <option value=\"ID\">ID</option>\r\n                <option value=\"CREATED_AT\">Created at</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Sort by: {this.props.sortBy}</td>\r\n            <td>page: {page}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    sortBy: selectors.getSettings(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  actions: bindActionCreators({ ...actions }, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport './App.css';\r\nimport store from \"./index\";\r\nimport { actions, getList } from \"./modules/index\";\r\nimport selectors from \"./modules/selectors\";\r\n\r\nimport List from \"./components/List\"\r\nimport Settings from \"./components/Settings\"\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      onPage: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    store.dispatch(getList());\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    this.setState({\r\n      onPage: e.target.innerHTML\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { myList, sortBy } = this.props;\r\n    const { onPage } = this.state;\r\n\r\n    return (\r\n      <Router>\r\n        <div className=\"container\">\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <td className=\"menu\">\r\n                  <Link \r\n                    to=\"/list\" \r\n                    onClick={this.handleClick}\r\n                    style={onPage===\"List\" ? {color: \"red\"} : {color: \"black\"}}\r\n                  >\r\n                    List\r\n                  </Link>\r\n                </td>\r\n                <td className=\"menu\">\r\n                  <Link \r\n                    to=\"/settings\" \r\n                    onClick={this.handleClick}\r\n                    style={onPage===\"Settings\" ? {color: \"red\"} : {color: \"black\"}}\r\n                  >\r\n                    Settings\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <Switch>\r\n            <Route path=\"/list\">\r\n              <List data={myList} sortBy={sortBy} page={1}/>\r\n            </Route>\r\n            <Route path=\"/settings\">\r\n              <Settings page={2}/>\r\n            </Route>\r\n            <Route path=\"/\">\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    myList: selectors.getMyList(state),\r\n    sortBy: selectors.getSettings(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  actions: bindActionCreators({ ...actions }, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./modules\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}